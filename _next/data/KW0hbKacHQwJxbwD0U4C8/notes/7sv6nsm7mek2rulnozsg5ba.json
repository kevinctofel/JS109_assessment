{"pageProps":{"note":{"id":"7sv6nsm7mek2rulnozsg5ba","title":"Scope","desc":"","updated":1679360078114,"created":1671213692111,"custom":{},"fname":"javascript.variables.scope","type":"note","vault":{"fsPath":".","selfContained":true,"name":"JS109_assessment"},"contentHash":"f3ba0225f7a28deb31eb048165114d03","links":[],"anchors":{"variable-scope-in-javascript":{"type":"header","text":"Variable scope in JavaScript","value":"variable-scope-in-javascript","line":7,"column":0,"depth":2},"global-scope":{"type":"header","text":"Global Scope","value":"global-scope","line":44,"column":0,"depth":2},"local-scope":{"type":"header","text":"Local Scope","value":"local-scope","line":48,"column":0,"depth":2},"function-scope":{"type":"header","text":"Function Scope","value":"function-scope","line":52,"column":0,"depth":3},"block-scope":{"type":"header","text":"Block Scope","value":"block-scope","line":73,"column":0,"depth":3}},"children":[],"parent":"0m6wvk9qd52ss46rxaeguta","data":{}},"body":"<h1 id=\"scope\">Scope<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#scope\"></a></h1>\n<h2 id=\"variable-scope-in-javascript\">Variable scope in JavaScript<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#variable-scope-in-javascript\"></a></h2>\n<p>Scope determines where variables and their data are available to a program. </p>\n<p>Block scope: <code>let</code> and <code>const</code> variables are accessible in the block they are declared. Blocks are defined by curly braces in JavaScript. These two variable types have the same scope.</p>\n<p>Code from one block cannot directly access variables declared in another block as those are out of scope.</p>\n<p>Technically, not all code between curly braces is in a block. Object literals, for example do not define a block. Examples:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// this is a block</span>\n  <span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// not technically a block. However, we can treat it as a block.</span>\n  <span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// foo has block scope</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// this is not a block</span>\n  <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Due to block scope, this code returns an error as the variable <code>a</code> doesn't exist outside of the code block:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError: a is not defined</span>\n</code></pre>\n<h2 id=\"global-scope\">Global Scope<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#global-scope\"></a></h2>\n<p>Variables in JavaScript with no functions or blocks have global scope. Additionally, any variables existing outside of functions or blocks have global scope.</p>\n<h2 id=\"local-scope\">Local Scope<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#local-scope\"></a></h2>\n<p>Two forms of local scope: Function scope and block scope.</p>\n<h3 id=\"function-scope\">Function Scope<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#function-scope\"></a></h3>\n<p>Variable scope is determined by where it is declared, so if you declare a variable in a function it is available to the entire function. Note that nested functions have nested scope.</p>\n<ol>\n<li>\n<p>Outer scope variables can be accessed by the inner scope, i.e.: a global variable can be accessed by a function.</p>\n</li>\n<li>\n<p>Inner scope variables can not be accessed by the outer scope. i.e.: code outside of a function can't directly access variables within that function. Typically JavaScript would return a <code>ReferenceError</code> as the variable is not defined globally.</p>\n</li>\n<li>\n<p>Peer scopes do not conflict, even with the same variable name. </p>\n</li>\n<li>\n<p>Nested functions have their own variable scope.</p>\n</li>\n<li>\n<p>Inner scope variables can shadow outer scope variables, i.e.: In cases when inner and outer scope variables have the same name, the inner variable prevents the outer variable from being accessed. Example:</p>\n</li>\n</ol>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this 'number' is ignored below</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"block-scope\">Block Scope<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#block-scope\"></a></h3>\n<p>Blocks are defined by statements and expressions within curly braces. The rules for block scope are the same as function scope, but limited to within the code block.</p>","noteIndex":{"id":"a9k6wbiqd7ihnwo2cwduopd","title":"Root","desc":"","updated":1670613986591,"created":1670613986591,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"JS109_assessment"},"contentHash":"24ae4dfa11dbed5fc0acb780ef95d93d","links":[],"anchors":{"welcome-to-dendron":{"type":"header","text":"Welcome to Dendron","value":"welcome-to-dendron","line":7,"column":0,"depth":1},"lookup":{"type":"header","text":"Lookup","value":"lookup","line":11,"column":0,"depth":2}},"children":["4ap1j0kdhfd938d6omjnrby","tm0bc08i4v42pdt22jlk12x","t738a2kyb95p21k0b1ayd9f"],"parent":null,"data":{},"body":"# Welcome to Dendron\n\nThis is the root of your dendron vault. If you decide to publish your entire vault, this will be your landing page. You are free to customize any part of this page except the frontmatter on top.\n\n## Lookup\n\nThis section contains useful links to related resources.\n\n- [Getting Started Guide](https://link.dendron.so/6b25)\n- [Discord](https://link.dendron.so/6b23)\n- [Home Page](https://wiki.dendron.so/)\n- [Github](https://link.dendron.so/6b24)\n- [Developer Docs](https://docs.dendron.so/)"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"JS109_assessment"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","assetsPrefix":"/JS109_assessment","siteUrl":"https://kevinctofel.github.io","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}