{"pageProps":{"note":{"id":"ra0p20kuodsnuloxagh1cke","title":"Flow control","desc":"","updated":1673921653500,"created":1673047707671,"custom":{},"fname":"javascript.flow_control","type":"note","vault":{"fsPath":".","selfContained":true,"name":"JS109_assessment"},"contentHash":"90cc4021c3e56f3983cfc77ee81b7703","links":[],"anchors":{"flow-control-in-javascript":{"type":"header","text":"Flow Control in JavaScript","value":"flow-control-in-javascript","line":7,"column":0,"depth":2},"conditionals":{"type":"header","text":"Conditionals","value":"conditionals","line":10,"column":0,"depth":3},"comparisons":{"type":"header","text":"Comparisons","value":"comparisons","line":22,"column":0,"depth":3},"short-circuits":{"type":"header","text":"Short circuits","value":"short-circuits","line":40,"column":0,"depth":3},"truthiness":{"type":"header","text":"Truthiness","value":"truthiness","line":47,"column":0,"depth":3},"operator-precedence":{"type":"header","text":"Operator precedence","value":"operator-precedence","line":92,"column":0,"depth":3},"the-ternary-operator":{"type":"header","text":"The ternary operator","value":"the-ternary-operator","line":100,"column":0,"depth":3},"switch-statements":{"type":"header","text":"Switch statements","value":"switch-statements","line":120,"column":0,"depth":3}},"children":[],"parent":"4ap1j0kdhfd938d6omjnrby","data":{}},"body":"<h1 id=\"flow-control\">Flow control<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#flow-control\"></a></h1>\n<h2 id=\"flow-control-in-javascript\">Flow Control in JavaScript<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#flow-control-in-javascript\"></a></h2>\n<p>How a program branches off to do different things based on inputs, outputs, etc...</p>\n<h3 id=\"conditionals\">Conditionals<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#conditionals\"></a></h3>\n<p>Checking \"if\" something is or happens changes the path or flow of code.</p>\n<p>Simplest method is with <code>if</code> statements, which can also be followed by <code>else</code> conditions.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                  <span class=\"token comment\">// If statement</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x is 3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// Clause to run</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Note in above example, the curly braces for the code block aren't needed. A single statement or expression doesn't require them but it's good practice.</p>\n<h3 id=\"comparisons\">Comparisons<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#comparisons\"></a></h3>\n<p>Comparisons return the boolean values of <code>true</code> or <code>false</code> depending on the condition and the operands.</p>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody><tr><td><code>===</code></td><td>Strict equality of value and type ; returns <code>true</code> if they are the same</td></tr><tr><td><code>!==</code></td><td>Strict inequality of value and type; returns <code>false</code> if they are the same</td></tr><tr><td><code>==</code></td><td>Non-strict or loose equality. Attempts to coerce types of one or both operands. Returns <code>true</code> if values but not type are the same.</td></tr><tr><td><code>!=</code></td><td>Non-strict or loose inequality. Attempt to coerce types of one or both operands. Returns <code>false</code> if values are the same, regardless of type.</td></tr><tr><td><code>&#x3C;</code></td><td>Less than returns <code>true</code> when left operand value is less than the right operand value</td></tr><tr><td><code>></code></td><td>Greater than returns <code>true</code> when right operand value is greater than left operand value</td></tr><tr><td><code>&#x3C;=</code></td><td>Less than or equal to returns <code>true</code> when left operand value is less than or equal to the right operand value</td></tr><tr><td><code>>=</code></td><td>Greater than or equal to returns <code>true</code> when the left operand value is greater than or equal to the right operand value</td></tr><tr><td><code>!</code></td><td>Logical not operator, negates an operand</td></tr><tr><td><code>&#x26;&#x26;</code></td><td>Logical and operator, returns <code>true</code> only if both operands are true</td></tr><tr><td>||</td><td>Logical or operator, returns <code>true</code> if either operand is true</td></tr></tbody></table></div>\n<h3 id=\"short-circuits\">Short circuits<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#short-circuits\"></a></h3>\n<p>Logical operators use short circuit evaluation so they can re-flow code sooner (or not at all) based on just the first operand.</p>\n<p>In an <code>&#x26;&#x26;</code> evaluation, if the first operand returns <code>false</code>, the second doesn't have to be evaluated.</p>\n<p>In an <code>||</code> evaluation, if the first operand returns <code>true</code>, the second doesn't have to be evaluated.</p>\n<h3 id=\"truthiness\">Truthiness<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#truthiness\"></a></h3>\n<p><code>If</code> statements always evaluated to <code>true</code> or <code>false</code>. But expressions can be evaluated for truthiness by JavaScript coercion, where the expression value is changed to represent true or false.</p>\n<p>Examples: </p>\n<pre class=\"language-js\"><code class=\"language-js\">a <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"how can this be true?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"it is not true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nb <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"how can this be true?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"it is not true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The first statement is truthy because the value of <code>a</code> is coerced to <code>true</code>.\nThe second statement is not truthy, or falsy, because the value of <code>b</code> is coerced to <code>false</code>.</p>\n<p>Why? JavaScript coerces the following values to <code>false</code>:</p>\n<ul>\n<li>false</li>\n<li>The numbers 0, -0, and 0n</li>\n<li><code>''</code>; an empty string</li>\n<li>undefined</li>\n<li>null</li>\n<li>NaN</li>\n</ul>\n<p>All other values are coerced to <code>true</code> in JavaScript.</p>\n<p>With <code>&#x26;&#x26;</code> and <code>||</code>, truthy and falsy can still short circuit, returning the value of the last evaluated operand.\nRather than test expressions with these with multiple code lines, use a ternary expression for clarity.\nExample:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Instead of this:</span>\n<span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">'qux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> isOk <span class=\"token operator\">=</span> foo <span class=\"token operator\">||</span> bar<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Use a ternary expression like this:</span>\n<span class=\"token keyword\">let</span> isOk <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">||</span> bar<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"operator-precedence\">Operator precedence<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#operator-precedence\"></a></h3>\n<p>From highest to lowest: </p>\n<ul>\n<li>&#x3C;=, &#x3C;, >, >= - Comparison</li>\n<li>===, !==, ==, != - Equality</li>\n<li>&#x26;&#x26; - Logical AND</li>\n<li>|| - Logical OR\nNote: expressions in parenthesis take precedence over those that are not.</li>\n</ul>\n<h3 id=\"the-ternary-operator\">The ternary operator<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-ternary-operator\"></a></h3>\n<p>Uses a combination of <code>?</code>, <code>:</code> after the expression, with the truthy and falsy return values inserted.\nExample:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">'this is true'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'this is not true'</span>\n<span class=\"token operator\">=</span> <span class=\"token string\">'this is true'</span>\n\n<span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"this is true\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"this is not true\"</span>\n<span class=\"token operator\">=</span> <span class=\"token string\">'this is not true'</span>\n</code></pre>\n<p>Why use a ternary expression over an <code>if/else</code> statement? Because it's a single expression and can be treated as value that can be stored, passed in as an argument, etc...</p>\n<p>Ternary expressions should be used to select between two values, not two actions. It's good practice to assign the value of a ternary expression to a variable or passed as an argument.\nExample:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> hitchhiker <span class=\"token operator\">?</span> <span class=\"token number\">42</span> <span class=\"token operator\">:</span> <span class=\"token number\">3.1415</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Assign result of ?: to a variable</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>hitchhiker <span class=\"token operator\">?</span> <span class=\"token number\">42</span> <span class=\"token operator\">:</span> <span class=\"token number\">3.1415</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Pass result as argument</span>\n<span class=\"token keyword control-flow\">return</span> hitchhiker <span class=\"token operator\">?</span> <span class=\"token number\">42</span><span class=\"token operator\">:</span> <span class=\"token number\">3.1415</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// Return result</span>\n</code></pre>\n<h3 id=\"switch-statements\">Switch statements<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#switch-statements\"></a></h3>\n<p>Similar to an <code>if</code> statement but compares a single value against multiple values for strict equality. It evaluates the expression to the value in each <code>case</code> clause. The <code>break</code> statements effectively short circuit the <code>switch</code> statement by dropping out when the evaluation is truthy.\nExample:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a is 5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a is 6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a is neither 5, nor 6'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// => a is 5</span>\n</code></pre>\n<p><code>Switch</code> statements can fall through multiple values that satisfy strict equality, like an <code>||</code> operator.\nExample:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// executed if a is 5, 6, or 7</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a is either 5, 6, or 7\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// executed if a is 8 or 9</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a is 8 or 9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">// executed if a is anything else</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a is not 5, 6, 7, 8, or 9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword control-flow\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>","noteIndex":{"id":"a9k6wbiqd7ihnwo2cwduopd","title":"Root","desc":"","updated":1670613986591,"created":1670613986591,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"JS109_assessment"},"contentHash":"24ae4dfa11dbed5fc0acb780ef95d93d","links":[],"anchors":{"welcome-to-dendron":{"type":"header","text":"Welcome to Dendron","value":"welcome-to-dendron","line":7,"column":0,"depth":1},"lookup":{"type":"header","text":"Lookup","value":"lookup","line":11,"column":0,"depth":2}},"children":["4ap1j0kdhfd938d6omjnrby","tm0bc08i4v42pdt22jlk12x","t738a2kyb95p21k0b1ayd9f"],"parent":null,"data":{},"body":"# Welcome to Dendron\n\nThis is the root of your dendron vault. If you decide to publish your entire vault, this will be your landing page. You are free to customize any part of this page except the frontmatter on top.\n\n## Lookup\n\nThis section contains useful links to related resources.\n\n- [Getting Started Guide](https://link.dendron.so/6b25)\n- [Discord](https://link.dendron.so/6b23)\n- [Home Page](https://wiki.dendron.so/)\n- [Github](https://link.dendron.so/6b24)\n- [Developer Docs](https://docs.dendron.so/)"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"JS109_assessment"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","assetsPrefix":"/JS109_assessment","siteUrl":"https://kevinctofel.github.io","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}