{"pageProps":{"note":{"id":"xfj1cw13flf2irwhxy4kz97","title":"Objects","desc":"","updated":1678385050265,"created":1670276925220,"custom":{},"fname":"javascript.data_structures.objects","type":"note","vault":{"fsPath":".","selfContained":true,"name":"JS109_assessment"},"contentHash":"be9566ffd11dafb0d81d7070d8307860","links":[],"anchors":{"objects-in-javascript":{"type":"header","text":"Objects in JavaScript","value":"objects-in-javascript","line":7,"column":0,"depth":2},"objects-vs-primitives":{"type":"header","text":"Objects vs primitives","value":"objects-vs-primitives","line":47,"column":0,"depth":2},"functions-are-objects":{"type":"header","text":"Functions are objects","value":"functions-are-objects","line":55,"column":0,"depth":3},"what-things-arent-objects-or-primitives":{"type":"header","text":"What things aren't objects or primitives?","value":"what-things-arent-objects-or-primitives","line":82,"column":0,"depth":3},"prototypes":{"type":"header","text":"Prototypes","value":"prototypes","line":90,"column":0,"depth":2},"iteration":{"type":"header","text":"Iteration","value":"iteration","line":103,"column":0,"depth":2},"the-forin-loop":{"type":"header","text":"The for/in loop","value":"the-forin-loop","line":105,"column":0,"depth":3},"object-keys":{"type":"header","text":"Object keys","value":"object-keys","line":123,"column":0,"depth":3},"common-operations-and-methods":{"type":"header","text":"Common Operations and Methods","value":"common-operations-and-methods","line":127,"column":0,"depth":2},"objects-vs-arrays":{"type":"header","text":"Objects vs. Arrays","value":"objects-vs-arrays","line":154,"column":0,"depth":2}},"children":[],"parent":"q3xjsxy4lhne08e06a8qwyh","data":{}},"body":"<h1 id=\"objects\">Objects<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#objects\"></a></h1>\n<h2 id=\"objects-in-javascript\">Objects in JavaScript<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#objects-in-javascript\"></a></h2>\n<p>Objects can be a dictionary-like structure with keys matching unique values, i.e.: A key-value pair.</p>\n<p>Object literals are created with curly braces, {} , and keys separated from values with a colon, : Multiple key-value pairs are comma separated:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">dog</span><span class=\"token operator\">:</span> <span class=\"token string\">'barks'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">cat</span><span class=\"token operator\">:</span> <span class=\"token string\">'meows'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">pig</span><span class=\"token operator\">:</span> <span class=\"token string\">'oinks'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">dog</span><span class=\"token operator\">:</span> <span class=\"token string\">'barks'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">cat</span><span class=\"token operator\">:</span> <span class=\"token string\">'meows'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">pig</span><span class=\"token operator\">:</span> <span class=\"token string\">'oinks'</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Values can be retrieved by their keys:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">dog</span><span class=\"token operator\">:</span> <span class=\"token string\">'barks'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">cat</span><span class=\"token operator\">:</span> <span class=\"token string\">'meows'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">pig</span><span class=\"token operator\">:</span> <span class=\"token string\">'oinks'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">=</span> <span class=\"token string\">'meows'</span>\n<span class=\"token comment\">// or objects variable name and key in brackets</span>\n<span class=\"token comment\">// animals['cat'];</span>\n</code></pre>\n<p>Other languages have key-value pairs but refer to them as dictionaries (Python?), associative arrays, maps and hashes.</p>\n<p>Object keys in JavaScript are strings (quotes are not needed) or symbols. Values can be any type.Example of creating an object with object literal syntax:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Jane'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">37</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">hobbies</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'photography'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'genealogy'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Object values are accessed with dot notation or bracket notation. The latter is required when a variable stores a key name.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> person<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span>                 <span class=\"token comment\">// dot notation</span>\n<span class=\"token operator\">=</span> <span class=\"token string\">'Jane'</span>\n\n<span class=\"token operator\">></span> person<span class=\"token punctuation\">[</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span>               <span class=\"token comment\">// bracket notation</span>\n<span class=\"token operator\">=</span> <span class=\"token number\">37</span>\n</code></pre>\n<p>To remove a value from an object, you can <code>delete</code> the object's key for that value. Doing so returns <code>true</code> unless the object property can't be deleted. Note: 'property' typically refers to an object key.</p>\n<p>When using <code>const</code> to declare and initialize an object, you can't change what the variable refers to. You can modify that object's properties and property values.</p>\n<p><code>Object.freeze()</code> prevents an object's properties from modification. This only works one level deep, however. Nested arrays or objects must be frozen to prevent modification.</p>\n<h2 id=\"objects-vs-primitives\">Objects vs primitives<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#objects-vs-primitives\"></a></h2>\n<p>Objects include simple objects, arrays, dates, functions and more. They're comprised of primitive values or other objects and are usually mutable.</p>\n<p>Primitive values are always <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Immutable\">immutable</a> and considered atomic, i.e.; indivisible.</p>\n<h3 id=\"functions-are-objects\">Functions are objects<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#functions-are-objects\"></a></h3>\n<p>Variables can be assigned to functions.\nExample:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello there!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Prints \"Hello there!\"</span>\n\n<span class=\"token keyword\">let</span> greet <span class=\"token operator\">=</span> hello<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// `greet` now points to the `hello` function</span>\n<span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// Prints \"Hello there!\"</span>\n</code></pre>\n<p>Functions can be passed to other functions and can be returned by other functions. Example of passing a function to another function as an argument:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">forEach</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&#x3C;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"what-things-arent-objects-or-primitives\">What things aren't objects or primitives?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-things-arent-objects-or-primitives\"></a></h3>\n<p>Anything that isn't data or a function isn't an object nor a primitive value:</p>\n<ul>\n<li>Variables and function names</li>\n<li>Statements (if, return, try, while, break)</li>\n<li>Keywords (new, function, let, const, class)</li>\n<li>Comments</li>\n</ul>\n<h2 id=\"prototypes\">Prototypes<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#prototypes\"></a></h2>\n<p>JavaScript objects can inherit properties from other objects.</p>\n<p>The <code>Object.create()</code> method creates a new object that inherits properties from an existing object. Example where <code>bob</code> is the prototype for the <code>studentBob</code> object:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> bob <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> studentBob <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">create</span><span class=\"token punctuation\">(</span>bob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstudentBob<span class=\"token punctuation\">.</span><span class=\"token property-access\">year</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Senior'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>studentBob<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 'Bob'</span>\n</code></pre>\n<h2 id=\"iteration\">Iteration<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#iteration\"></a></h2>\n<h3 id=\"the-forin-loop\">The for/in loop<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-forin-loop\"></a></h3>\n<p>Similar to a standard <code>for</code> loop but simpler as it iterates over all keys in an object. Example:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'6 ft'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> prop <span class=\"token keyword\">in</span> person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>                             <span class=\"token comment\">// => Bob</span>\n                              <span class=\"token comment\">//    30</span>\n                              <span class=\"token comment\">//    6 ft</span>\n</code></pre>\n<h3 id=\"object-keys\">Object keys<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#object-keys\"></a></h3>\n<p><code>Object.keys()</code> returns all of an object's own keys as an array. It does not return keys from any prototype objects.</p>\n<h2 id=\"common-operations-and-methods\">Common Operations and Methods<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#common-operations-and-methods\"></a></h2>\n<p><code>Object.values()</code> returns an object's own properties in an array. Example:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'6ft'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> personValues <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">values</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>personValues<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => [ 'Bob', 30, '6ft' ]</span>\n</code></pre>\n<p><code>Object.entries()</code> returns the keys and values of an object in a nested array. Example:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token string\">'6ft'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => [[ 'name', 'Bob' ], [ 'age', 30 ], [ 'height', '6ft' ]]</span>\n</code></pre>\n<p><code>Object.assign()</code> merges the keys and values of two or more objects into a single object. This mutates the first object so that it contains the merged object. Example:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token keyword\">let</span> objA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">=</span> <span class=\"token keyword nil\">undefined</span>\n\n<span class=\"token operator\">></span> <span class=\"token keyword\">let</span> objB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">=</span> <span class=\"token keyword nil\">undefined</span>\n\n<span class=\"token operator\">></span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span>objA<span class=\"token punctuation\">,</span> objB<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"objects-vs-arrays\">Objects vs. Arrays<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#objects-vs-arrays\"></a></h2>\n<p>How to choose between an object and an array for storing data:</p>\n<ul>\n<li>If the values have individual names or labels, use and object.</li>\n<li>If order matters, choose an array.</li>\n<li>For stack and queue types of data, choose an array.</li>\n</ul>\n<p>NOTE: JavaScript will coerce non-string values when using them as object keys.</p>","noteIndex":{"id":"a9k6wbiqd7ihnwo2cwduopd","title":"Root","desc":"","updated":1670613986591,"created":1670613986591,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"JS109_assessment"},"contentHash":"24ae4dfa11dbed5fc0acb780ef95d93d","links":[],"anchors":{"welcome-to-dendron":{"type":"header","text":"Welcome to Dendron","value":"welcome-to-dendron","line":7,"column":0,"depth":1},"lookup":{"type":"header","text":"Lookup","value":"lookup","line":11,"column":0,"depth":2}},"children":["4ap1j0kdhfd938d6omjnrby","tm0bc08i4v42pdt22jlk12x","t738a2kyb95p21k0b1ayd9f"],"parent":null,"data":{},"body":"# Welcome to Dendron\n\nThis is the root of your dendron vault. If you decide to publish your entire vault, this will be your landing page. You are free to customize any part of this page except the frontmatter on top.\n\n## Lookup\n\nThis section contains useful links to related resources.\n\n- [Getting Started Guide](https://link.dendron.so/6b25)\n- [Discord](https://link.dendron.so/6b23)\n- [Home Page](https://wiki.dendron.so/)\n- [Github](https://link.dendron.so/6b24)\n- [Developer Docs](https://docs.dendron.so/)"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"JS109_assessment"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","assetsPrefix":"/JS109_assessment","siteUrl":"https://kevinctofel.github.io","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}