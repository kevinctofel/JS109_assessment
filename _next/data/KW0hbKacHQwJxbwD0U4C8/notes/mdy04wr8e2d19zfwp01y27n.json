{"pageProps":{"note":{"id":"mdy04wr8e2d19zfwp01y27n","title":"Functions","desc":"","updated":1672333409190,"created":1671218755744,"custom":{},"fname":"javascript.functions","type":"note","vault":{"fsPath":".","selfContained":true,"name":"JS109_assessment"},"contentHash":"86f612da861aa9634b6204c75252c988","links":[],"anchors":{"functions-in-javascript":{"type":"header","text":"Functions in JavaScript","value":"functions-in-javascript","line":7,"column":0,"depth":2},"functions":{"type":"header","text":"Functions","value":"functions","line":9,"column":0,"depth":3},"arguments-and-parameters":{"type":"header","text":"Arguments and Parameters","value":"arguments-and-parameters","line":24,"column":0,"depth":3},"return-values":{"type":"header","text":"Return values","value":"return-values","line":42,"column":0,"depth":3},"default-parameters":{"type":"header","text":"Default parameters","value":"default-parameters","line":47,"column":0,"depth":3},"nested-functions":{"type":"header","text":"Nested functions","value":"nested-functions","line":58,"column":0,"depth":3},"function-scope":{"type":"header","text":"Function scope","value":"function-scope","line":61,"column":0,"depth":3},"functions-vs-methods":{"type":"header","text":"Functions vs. methods","value":"functions-vs-methods","line":66,"column":0,"depth":3},"function-composition":{"type":"header","text":"Function composition","value":"function-composition","line":69,"column":0,"depth":2},"defining-a-function-three-ways":{"type":"header","text":"Defining a function (three ways)","value":"defining-a-function-three-ways","line":78,"column":0,"depth":2},"first-class-functions":{"type":"header","text":"First-class functions","value":"first-class-functions","line":87,"column":0,"depth":2}},"children":[],"parent":"4ap1j0kdhfd938d6omjnrby","data":{}},"body":"<h1 id=\"functions\">Functions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#functions\"></a></h1>\n<h2 id=\"functions-in-javascript\">Functions in JavaScript<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#functions-in-javascript\"></a></h2>\n<h3 id=\"functions-1\">Functions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#functions-1\"></a></h3>\n<p>Functions (or function objects) are defined by the <code>function</code> keyword. This can be skipped by using the name of a function when creating an arrow function, however.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n <span class=\"token comment\">// OR</span>\n <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">say</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>To reduce ambiguity we say we are \"invoking a function\" rather than \"calling a function\".</p>\n<h3 id=\"arguments-and-parameters\">Arguments and Parameters<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#arguments-and-parameters\"></a></h3>\n<p>When we invoke a function we are passing arguments from outside the function's scope so the function can use the data. The arguments are objects or primitive values.</p>\n<p>When defining a function, we declare any parameters the function accepts. Parameters are local variables initialized when the function is invoked. Therefore, when the function is complete, the parameters are destroyed.</p>\n<p>You can pass more arguments than a function has parameters; they will be ignored. However, passing fewer arguments than a function requires causes an error as those missing parameters are assigned <code>undefined</code>.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// left &#x26; right are parameters here</span>\n  <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// left &#x26; right are arguments here</span>\n  <span class=\"token keyword control-flow\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 is ignored; prints 9</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// second argument missing; prints NaN</span>\n                           <span class=\"token comment\">// 3 + undefined is NaN</span>\n</code></pre>\n<h3 id=\"return-values\">Return values<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#return-values\"></a></h3>\n<p>The <code>return</code> statement returns a result to the code that called a function.\nWithout a return statement, a JavaScript function will return <code>undefined</code> as the implicit return value.\nFunctions that always return a boolean value (true or false only) are predicates.</p>\n<h3 id=\"default-parameters\">Default parameters<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#default-parameters\"></a></h3>\n<p>You can set default parameters for functions invoked without any arguments provided by setting the parameter to a default value:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>text <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Howdy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => Howdy!</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// => hello!</span>\n</code></pre>\n<h3 id=\"nested-functions\">Nested functions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#nested-functions\"></a></h3>\n<p>Functions can be nested within other functions. Once the inner function completes, it and all of its local data, is destroyed.</p>\n<h3 id=\"function-scope\">Function scope<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#function-scope\"></a></h3>\n<p>Global variables are available to all code in a program, so any function has access to them. Functions can modify global variables.</p>\n<p>Local variables defined inside of a function are only accessible within that function.</p>\n<h3 id=\"functions-vs-methods\">Functions vs. methods<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#functions-vs-methods\"></a></h3>\n<p>Functions pass arguments within their parenthesis. So too do methods, but methods are pre-defined functions on objects so you have to call a method on an object using the period.</p>\n<h2 id=\"function-composition\">Function composition<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#function-composition\"></a></h2>\n<p>JavaScript lets a function call as an argument to another function via function composition. This is because function calls always return a value.</p>\n<p>Examples of passing a function call as an argument to the <code>console.log()</code> function:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 65</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 70</span>\n</code></pre>\n<h2 id=\"defining-a-function-three-ways\">Defining a function (three ways)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#defining-a-function-three-ways\"></a></h2>\n<ol>\n<li>Create a function declaration and call the function.</li>\n<li>Create a function expression by setting a variable name equal to a function declaration.</li>\n<li>Use an arrow function, which is similar to option 2 but more concise. Arrow functions have implicit returns so you don't  need a <code>return</code> statement for a single expression. Example:</li>\n</ol>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">// this returns the value of a + b</span>\n</code></pre>\n<p>Note that function expressions are saved to a variable so they can't be invoked before definition.</p>\n<h2 id=\"first-class-functions\">First-class functions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#first-class-functions\"></a></h2>\n<p>All JavaScript functions are considered to be objects so they can be assigned to variables, passed as arguments and returned from function calls.</p>","noteIndex":{"id":"a9k6wbiqd7ihnwo2cwduopd","title":"Root","desc":"","updated":1670613986591,"created":1670613986591,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"JS109_assessment"},"contentHash":"24ae4dfa11dbed5fc0acb780ef95d93d","links":[],"anchors":{"welcome-to-dendron":{"type":"header","text":"Welcome to Dendron","value":"welcome-to-dendron","line":7,"column":0,"depth":1},"lookup":{"type":"header","text":"Lookup","value":"lookup","line":11,"column":0,"depth":2}},"children":["4ap1j0kdhfd938d6omjnrby","tm0bc08i4v42pdt22jlk12x","t738a2kyb95p21k0b1ayd9f"],"parent":null,"data":{},"body":"# Welcome to Dendron\n\nThis is the root of your dendron vault. If you decide to publish your entire vault, this will be your landing page. You are free to customize any part of this page except the frontmatter on top.\n\n## Lookup\n\nThis section contains useful links to related resources.\n\n- [Getting Started Guide](https://link.dendron.so/6b25)\n- [Discord](https://link.dendron.so/6b23)\n- [Home Page](https://wiki.dendron.so/)\n- [Github](https://link.dendron.so/6b24)\n- [Developer Docs](https://docs.dendron.so/)"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"JS109_assessment"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","assetsPrefix":"/JS109_assessment","siteUrl":"https://kevinctofel.github.io","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}