{"pageProps":{"note":{"id":"bwqhdi1jid9jlk5o6gbyafb","title":"Reassignment and mutation","desc":"","updated":1672333204186,"created":1671556958029,"custom":{},"fname":"javascript.variables.reassignment_and_mutation","type":"note","vault":{"fsPath":".","selfContained":true,"name":"JS109_assessment"},"contentHash":"1d8a914ccab57b63f908ca182278e4e4","links":[],"anchors":{"reassignment-and-mutation-in-javascript":{"type":"header","text":"Reassignment and mutation in JavaScript","value":"reassignment-and-mutation-in-javascript","line":7,"column":0,"depth":2},"reassignment":{"type":"header","text":"Reassignment","value":"reassignment","line":9,"column":0,"depth":3},"mutation":{"type":"header","text":"Mutation","value":"mutation","line":13,"column":0,"depth":3},"mutating-the-caller":{"type":"header","text":"Mutating the caller","value":"mutating-the-caller","line":34,"column":0,"depth":2},"key-concept-of-mutation":{"type":"header","text":"Key concept of mutation","value":"key-concept-of-mutation","line":61,"column":0,"depth":2}},"children":[],"parent":"0m6wvk9qd52ss46rxaeguta","data":{}},"body":"<h1 id=\"reassignment-and-mutation\">Reassignment and mutation<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#reassignment-and-mutation\"></a></h1>\n<h2 id=\"reassignment-and-mutation-in-javascript\">Reassignment and mutation in JavaScript<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#reassignment-and-mutation-in-javascript\"></a></h2>\n<h3 id=\"reassignment\">Reassignment<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#reassignment\"></a></h3>\n<p>Changes the value assigned to a variable.\nHow? Variables point to the memory space where a value is stored, so we create a new memory space with a new value to reassign the variable. A reassigned variable points to this new memory space.</p>\n<h3 id=\"mutation\">Mutation<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#mutation\"></a></h3>\n<p>Change the value of the thing bound to the variable?\nHow? Mutation point to the values stored in memory, so we change the value where the variable points to. The variable still points to the same memory space.</p>\n<p>Examples:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// A variable assigned to a primitive value</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// A variable assigned to an array</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A variable assigned to an object</span>\n\nnum <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Reassignment</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Reassignment of array element, but NOT the variable</span>\n             <span class=\"token comment\">// The array referenced by arr is mutated!</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span> <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Reassignment of object property, but NOT the variable</span>\n             <span class=\"token comment\">// The object referenced by obj is mutated.</span>\n\n<span class=\"token comment\">// You can still reassign the variables</span>\narr <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// Reassignment; array is lost</span>\nobj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>      <span class=\"token comment\">// Reassignment: now refers to a different object</span>\n</code></pre>\n<h2 id=\"mutating-the-caller\">Mutating the caller<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#mutating-the-caller\"></a></h2>\n<p>Example of a non-mutating method, where the stored value of <code>name</code> remains unchanged:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"Pete Hanson\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 'PETE HANSON'</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// => 'Pete Hanson'</span>\n</code></pre>\n<p><code>toUpperCase()</code> returns a new value but leaves the original value as is.</p>\n<p>In contrast, the <code>pop</code> method mutates an array (the caller) and is therefore destructive:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> oddNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\noddNumbers<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>oddNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => [1, 3, 5, 7]</span>\n</code></pre>\n<p>Note that primitive values are immutable so their values never change; where they point to in memory can change, however. </p>\n<p>Functions can (but don't always) mutate arguments as well, although this applies only to global variables. Example:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">changeFirstElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> oneToFive <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">changeFirstElement</span><span class=\"token punctuation\">(</span>oneToFive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>oneToFive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => [9, 2, 3, 4, 5]</span>\n</code></pre>\n<h2 id=\"key-concept-of-mutation\">Key concept of mutation<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#key-concept-of-mutation\"></a></h2>\n<p>Primitive values are immutable. That means their values never change; operations on immutable values always return new values. Operations on mutable values (arrays and objects) may or may not return a new value and may or may not mutate data.</p>","noteIndex":{"id":"a9k6wbiqd7ihnwo2cwduopd","title":"Root","desc":"","updated":1670613986591,"created":1670613986591,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"JS109_assessment"},"contentHash":"24ae4dfa11dbed5fc0acb780ef95d93d","links":[],"anchors":{"welcome-to-dendron":{"type":"header","text":"Welcome to Dendron","value":"welcome-to-dendron","line":7,"column":0,"depth":1},"lookup":{"type":"header","text":"Lookup","value":"lookup","line":11,"column":0,"depth":2}},"children":["4ap1j0kdhfd938d6omjnrby","tm0bc08i4v42pdt22jlk12x","t738a2kyb95p21k0b1ayd9f"],"parent":null,"data":{},"body":"# Welcome to Dendron\n\nThis is the root of your dendron vault. If you decide to publish your entire vault, this will be your landing page. You are free to customize any part of this page except the frontmatter on top.\n\n## Lookup\n\nThis section contains useful links to related resources.\n\n- [Getting Started Guide](https://link.dendron.so/6b25)\n- [Discord](https://link.dendron.so/6b23)\n- [Home Page](https://wiki.dendron.so/)\n- [Github](https://link.dendron.so/6b24)\n- [Developer Docs](https://docs.dendron.so/)"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"JS109_assessment"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","assetsPrefix":"/JS109_assessment","siteUrl":"https://kevinctofel.github.io","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}