{"pageProps":{"note":{"id":"r5xdkanjp8myc7euvod3v1c","title":"Coercion","desc":"","updated":1679192491916,"created":1670275182089,"custom":{},"fname":"javascript.coercion","type":"note","vault":{"fsPath":".","selfContained":true,"name":"JS109_assessment"},"contentHash":"6f97732181d76d20d0c5edb2f090be2e","links":[],"anchors":{"explicit-coercion":{"type":"header","text":"Explicit Coercion","value":"explicit-coercion","line":7,"column":0,"depth":2},"implicit-coercion":{"type":"header","text":"Implicit Coercion","value":"implicit-coercion","line":80,"column":0,"depth":2}},"children":[],"parent":"4ap1j0kdhfd938d6omjnrby","data":{}},"body":"<h1 id=\"coercion\">Coercion<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#coercion\"></a></h1>\n<h2 id=\"explicit-coercion\">Explicit Coercion<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#explicit-coercion\"></a></h2>\n<p>If we want to change a data type, such as a string of numbers to a Number type, we perform an explicit type coercion.</p>\n<ul>\n<li>String to Numbers</li>\n</ul>\n<p>Use the Number function to coerce a string to a number:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token known-class-name class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n</code></pre>\n<p>The Number function accepts a string value argument, returning a number if the string is comprised of valid numeric data. </p>\n<p><strong>If the string doesn't have valid numeric data, <code>Number()</code> will return <code>NaN</code></strong></p>\n<p><strong>Coercing an empty string to a number returns a <code>0</code></strong></p>\n<p><strong>Coercing a boolean value from <code>true</code> returns a <code>1</code> while coercing <code>false</code> returns a <code>0</code></strong></p>\n<ul>\n<li>parseInt() function alternative</li>\n</ul>\n<p>Similar to the Number() function for coercion but works with a mix of string data comprised of numbers and non-numeric characters. </p>\n<p><strong><code>parseInt()</code> will convert string numbers until it reaches an invalid character.</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12xyz'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token number\">12</span>\n</code></pre>\n<p>Note that if you pass a fractional character to parseInt() it will only return the integer value, not any decimal values less than 1.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3.1415'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n</code></pre>\n<p><strong><code>parseInt()</code> can accept a second argument called the radix; this indicates the base of the number argument, i.e.: radix of 2 = base 2</strong></p>\n<ul>\n<li>parseFloat() alternative</li>\n</ul>\n<p>However, the parseFloat() function will handle fractional numbers for explicit coercion.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12.5foo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token number\">12.5</span>\n</code></pre>\n<ul>\n<li>Numbers to strings</li>\n</ul>\n<p>To explicitly coerce numbers into a string data type, use the String() function.</p>\n<p><strong> This function can be used on <code>undefined</code> and <code>null</code> while the <code>toString()</code> can not.</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token string\">'20'</span>\n</code></pre>\n<ul>\n<li>Using the unary <code>+</code> operator to coerce strings to numbers</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">+</span><span class=\"token string\">'1'</span> <span class=\"token comment\">// returns the number value 1</span>\n</code></pre>\n<ul>\n<li>Coercing values to strings with the <code>toString()</code> method</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns the string \"123\"</span>\n</code></pre>\n<p>This can also be used on arrays:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns the concatenated string \"1, 2, 3\";</span>\n</code></pre>\n<h2 id=\"implicit-coercion\">Implicit Coercion<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#implicit-coercion\"></a></h2>\n<ul>\n<li>Using the <code>==</code> operator</li>\n</ul>\n<p>The non-strict equality operator will coerce values that are not of the same type:</p>\n<ol>\n<li>When a number is compared with a string using ==, the string is coerced into a number.</li>\n<li>When a boolean is compared with any other value, it is coerced into a number and compared again using the == operator.</li>\n<li>When an object is compared with a primitive value, the object is coerced into a primitive value and compared again using the == operator.</li>\n<li>A == comparison of undefined with null evaluates as true.</li>\n</ol>\n<p><strong> When using the non-strict equality operator on two objects, it only returns true if they are the same object.</strong></p>\n<ul>\n<li>Using the binary <code>+</code> operator</li>\n</ul>\n<p>When one of the operands is a string, the <code>+</code> operator will coerce the other operand to a string and concatenate them.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'number '</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns the string 'number 1'</span>\n</code></pre>\n<p>When one of the operands is an object, both are converted to strings and concatenated:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// \"12\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// \"12\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// \"1,23\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// \"5\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// \"true\"</span>\n<span class=\"token number\">42</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// \"42[object Object]\"</span>\n</code></pre>","noteIndex":{"id":"a9k6wbiqd7ihnwo2cwduopd","title":"Root","desc":"","updated":1670613986591,"created":1670613986591,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"JS109_assessment"},"contentHash":"24ae4dfa11dbed5fc0acb780ef95d93d","links":[],"anchors":{"welcome-to-dendron":{"type":"header","text":"Welcome to Dendron","value":"welcome-to-dendron","line":7,"column":0,"depth":1},"lookup":{"type":"header","text":"Lookup","value":"lookup","line":11,"column":0,"depth":2}},"children":["4ap1j0kdhfd938d6omjnrby","tm0bc08i4v42pdt22jlk12x","t738a2kyb95p21k0b1ayd9f"],"parent":null,"data":{},"body":"# Welcome to Dendron\n\nThis is the root of your dendron vault. If you decide to publish your entire vault, this will be your landing page. You are free to customize any part of this page except the frontmatter on top.\n\n## Lookup\n\nThis section contains useful links to related resources.\n\n- [Getting Started Guide](https://link.dendron.so/6b25)\n- [Discord](https://link.dendron.so/6b23)\n- [Home Page](https://wiki.dendron.so/)\n- [Github](https://link.dendron.so/6b24)\n- [Developer Docs](https://docs.dendron.so/)"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"JS109_assessment"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","assetsPrefix":"/JS109_assessment","siteUrl":"https://kevinctofel.github.io","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}